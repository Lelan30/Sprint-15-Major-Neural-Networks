### Apply Convolutional Neural Network to a Classification Task ###
## A concolutional layer that maps regions od the input image to the
## responsible neuron ( They also have a "pooling" layer)

## Follow-Along ##

# Imports
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
from keras.optimizers import SGD

# Load dataset
(trainX, trainy), (testX, testy) = mnist.load_data()

# Look at training / test sizes
print('Train: X=%s, y=%s' % (trainX.shape, trainy.shape))
print('Test: X=%s, y=%s' % (testX.shape, testy.shape))

# Plot the first 9 images
for i in range(9):
    plt.subplot(330 + 1 + i)
    plt.imshow(trainX[i], cmap=plt.get_cmap('gray'))

plt.show()

plt.clf()

'''
output:
60,000 imges to use for training, 10,000 for testing.
'''

# reshape the data to 6000 28x28x1 matrices
# one-hot-encode target array to represent digits from 0 through 9

# Reshape training images
trainX = trainX.reshape((trainX.shape[0], 28, 28, 1))
testX = testX.reshape((testX.shape[0], 28, 28, 1))
print(trainX.shape)

# One hot target values
from keras.utils import to_categorical

trainy = to_categorical(trainy)
testy = to_categorical(testy)

'''
output:

(60000, 28, 28, 1)
'''

# Data needs to be scaled, each pixel with a value between 0 and 1
# currently is 0 though 255, just divide by 255

# scale pixel
def prep_pixel(train, test):
    # convert from int to float
    train_norm = train.astype('float32')
    test_norm = test.astype('float32')
    # normalize to range 0-1
    train_norm = train_norm / 255.0
    test_norm = test_norm / 255.0
    # return normalized image
    return train_norm, test_norm

# Convert images
trainX_norm, testX_norm = prep_pixel(trainX, testX)

'''
Images ready now set up model
Convolutional layering, a pooling layer, and a few other layers including,
output corresponding to ten digits
'''

#Import kereas layer, models
# from keras.models import Sequential
# from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
# from keras.optimizers import SGD

# set up model
model = Sequential()

# Convolutional layer with 3x3 kernel
model.add(Conv2D(32, (3, 3), activation='relu',
                 kernel_initializer='he_uniform',
                 input_shape=(28, 28, 1)))

# Pooling layer (max value)
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())

# Dense layer
model.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))

# Output layer
model.add(Dense(10, activation='softmax'))

# Compile
opt = SGD(lr=0.01, momentum=0.9)
model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])

# Now train model
model.fit(trainX_norm, trainy, epochs=5,
          batch_size=32, validation_data=(testX_norm, testy),
          verbose=0)

# Evaluate on test set
model.evaluate(testX, testy, verbose=0)

'''
output: (Second number displayed is the accuracy)

[26.49790382385254, 0.9621000289916992]
'''
